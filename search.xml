<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/25/hello-world/"/>
      <url>/2023/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 你好，ql，qw，快做作业！👀🐱‍🚀👀</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br></pre></td><td class="code"><pre><span class="line">Python 实现十大经典排序算法</span><br><span class="line"> 首发于: 2020-10-24丨  阅读量: 143丨  字数统计: 10.4k丨  阅读时长: 44分丨  Python  算法</span><br><span class="line">文章目录</span><br><span class="line">排序算法分类</span><br><span class="line">一、冒泡排序（Bubble Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">二、选择排序（Selection Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">三、插入排序（Insertion Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">四、希尔排序（Shell Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">五、归并排序（Merge Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">六、快速排序（Quick Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">七、堆排序（Heap Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">八、计数排序（Counting Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">九、桶排序（Bucket Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">十、基数排序（Radix Sort）</span><br><span class="line">1、原理</span><br><span class="line">2、步骤</span><br><span class="line">3、动画演示</span><br><span class="line">4、代码实现</span><br><span class="line">5、具体示例</span><br><span class="line">参考资料：https://www.bilibili.com/video/BV1mp4y1D7UP</span><br><span class="line">本文动图演示来源：https://visualgo.net/</span><br><span class="line">这里是一段物理防爬虫文本，请读者忽略。</span><br><span class="line">本文原创首发于 CSDN，作者 ITBOB。</span><br><span class="line">博客首页：https://itrhx.blog.csdn.net/</span><br><span class="line">本文链接：https://itrhx.blog.csdn.net/article/details/108987300</span><br><span class="line">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span><br><span class="line">排序算法分类</span><br><span class="line">内部排序：指在排序期间，元素全部存放在内存中的排序，常见的内部排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序等。</span><br><span class="line">外部排序：指在排序期间，元素无法完全全部同时存放在内存中，必须在排序的过程中根据要求不断地在内、外存之间移动的排序；</span><br><span class="line">比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</span><br><span class="line">非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。 常见的非比较类排序算法有：基数排序、计数排序、桶排序等</span><br><span class="line">一般情况下，内部排序算法在执行过程中都要进行两种操作：比较和移动。通过比较两个关键字的大小，确定对应元素的前后关系，然后通过移动元素以达到有序。但是，并非所有的内部排序算法都要基于比较操作。</span><br><span class="line"></span><br><span class="line">每种排序算法都有各自的优缺点，适合在不同的环境下使用，就其全面性能而言，很难提出一种被认为是最好的算法。通常可以将排序算法分为插入排序、交换排序、选择排序、归并排序和基数排序五大类，内部排序算法的性能取决于算法的时间复杂度和空间复杂度，而时间复杂度一般是由比较和移动的次数决定的。</span><br><span class="line"></span><br><span class="line">01</span><br><span class="line"></span><br><span class="line">排序算法时间复杂度（平均）时间复杂度（最好）时间复杂度（最坏）空间复杂度稳定性</span><br><span class="line">冒泡排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">O(1)稳定</span><br><span class="line">选择排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">O(1)不稳定</span><br><span class="line">插入排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">O(1)稳定</span><br><span class="line">希尔排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlog </span><br><span class="line">2</span><br><span class="line"> n)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlog </span><br><span class="line">2</span><br><span class="line"> n)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">O(1)不稳定</span><br><span class="line">归并排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n)稳定</span><br><span class="line">快速排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(logn)不稳定</span><br><span class="line">堆排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(nlogn)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">O(1)不稳定</span><br><span class="line">计数排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(k)稳定</span><br><span class="line">桶排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">O(n </span><br><span class="line">2</span><br><span class="line"> )</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)稳定</span><br><span class="line">基数排序</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">∗</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n∗k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">∗</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n∗k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">∗</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n∗k)</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">+</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">O(n+k)稳定</span><br><span class="line">稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序是否相同。例：如果 a 原本在 b 前面，且 a=b，排序之后 a 仍然在 b 的前面，则表示具有稳定性。</span><br><span class="line"></span><br><span class="line">常见时间复杂度大小比较：</span><br><span class="line"></span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">2</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">2</span><br><span class="line">�</span><br><span class="line">)</span><br><span class="line">&lt;</span><br><span class="line">�</span><br><span class="line">(</span><br><span class="line">�</span><br><span class="line">!</span><br><span class="line">)</span><br><span class="line">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n </span><br><span class="line">2</span><br><span class="line"> )&lt;...&lt;O(2 </span><br><span class="line">n</span><br><span class="line"> )&lt;O(n!)</span><br><span class="line"></span><br><span class="line">一、冒泡排序（Bubble Sort）</span><br><span class="line">1、原理</span><br><span class="line">重复地走访要排序的元素，依次比较两个相邻的元素，如果顺序（如从大到小）错误就把他们交换过来。走访元素的工作是重复地进行，直到没有相邻元素需要交换，也就是说该元素列已经排序完成。冒泡的意思其实就是每一轮冒泡一个最大的元素就会通过不断比较和交换相邻元素使它转移到最右边。</span><br><span class="line"></span><br><span class="line">假如有 10 个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好，于是他开始喊口号。 每喊一次，从第一个小盆友开始，相邻的小朋友如果身高不是正序就会两两调换，就这样第一轮个头最高的排到了最右边（冒泡到最右边），第二轮依次这么来，从第一个小朋友开始两两交换，这样次高的小盆友又排到了倒数第二个位置。依次类推。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 比较相邻的元素。如果第一个比第二个大，就交换它们两个；</span><br><span class="line">② 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</span><br><span class="line">③ 针对所有的元素重复步骤 ① ~ ②，除了最后一个元素，直到排序完成。</span><br><span class="line">3、动画演示</span><br><span class="line">02冒泡排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def bubbleSort(arr):</span><br><span class="line">    for i in range(len(arr)-1):         # 循环第 i 趟</span><br><span class="line">        for j in range(len(arr)-i-1):   # j 为下标</span><br><span class="line">            if arr[j] &gt; arr[j+1]:       # 如果这个数大于后面的数就交换两者的位置</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line">    return arr</span><br><span class="line">冒泡排序还有一种优化算法，就是立一个 flag，当某一趟序列遍历中元素没有发生交换，则证明该序列已经有序，就不再进行后续的排序。动画演示里就是改进后的算法，改进后的代码如下：</span><br><span class="line"></span><br><span class="line">def bubbleSort(arr):</span><br><span class="line">    for i in range(len(arr)-1):         # 循环第 i 趟</span><br><span class="line">    flag = False</span><br><span class="line">        for j in range(len(arr)-i-1):   # j 为下标</span><br><span class="line">            if arr[j] &gt; arr[j+1]:       # 如果这个数大于后面的数就交换两者的位置</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line">                flag = True</span><br><span class="line">        if not flag:</span><br><span class="line">            return</span><br><span class="line">    return arr</span><br><span class="line">冒泡排序最快的情况：当输入的数据是正序时；最慢的情况：当输入的数据是反序时。</span><br><span class="line"></span><br><span class="line">5、具体示例</span><br><span class="line">未改进版本：</span><br><span class="line"></span><br><span class="line">def bubble_sort(arr):</span><br><span class="line">    for i in range(len(arr)-1):         # 循环第 i 趟</span><br><span class="line">        for j in range(len(arr)-i-1):   # j 为下标</span><br><span class="line">            if arr[j] &gt; arr[j+1]:       # 如果这个数大于后面的数就交换两者的位置</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line">        print(arr)                      # 每一趟比较完了就打印一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]</span><br><span class="line">bubble_sort(arr)</span><br><span class="line">[3, 38, 5, 44, 15, 36, 26, 27, 2, 46, 4, 19, 47, 48, 50]</span><br><span class="line">[3, 5, 38, 15, 36, 26, 27, 2, 44, 4, 19, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 36, 26, 27, 2, 38, 4, 19, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 26, 27, 2, 36, 4, 19, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 26, 2, 27, 4, 19, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 2, 26, 4, 19, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 2, 15, 4, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 2, 5, 4, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">改进版本：</span><br><span class="line"></span><br><span class="line">def bubble_sort(arr):</span><br><span class="line">    for i in range(len(arr)-1):         # 循环第 i 趟</span><br><span class="line">        flag = False</span><br><span class="line">        for j in range(len(arr)-i-1):   # j 为下标</span><br><span class="line">            if arr[j] &gt; arr[j+1]:       # 如果这个数大于后面的数就交换两者的位置</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line">                flag = True</span><br><span class="line">        if not flag:</span><br><span class="line">            return</span><br><span class="line">        print(arr)                      # 每一趟比较完了就打印一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]</span><br><span class="line">bubble_sort(arr)</span><br><span class="line">[3, 38, 5, 44, 15, 36, 26, 27, 2, 46, 4, 19, 47, 48, 50]</span><br><span class="line">[3, 5, 38, 15, 36, 26, 27, 2, 44, 4, 19, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 36, 26, 27, 2, 38, 4, 19, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 26, 27, 2, 36, 4, 19, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 26, 2, 27, 4, 19, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 15, 2, 26, 4, 19, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 5, 2, 15, 4, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[3, 2, 5, 4, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">二、选择排序（Selection Sort）</span><br><span class="line">1、原理</span><br><span class="line">第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。可以理解为 一个 0 到 n-1 的迭代，每次向后查找选择一个最小的元素。选择排序是不稳定的排序方法。</span><br><span class="line"></span><br><span class="line">假如有 10 个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好，我们从第一个开始，从头到尾找一个个头最小的小盆友，然后把它和第一个小盆友交换。 然后从第二个小盆友开始采取同样的策略，这样一圈下来小盆友就是有序的了。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</span><br><span class="line">② 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</span><br><span class="line">③ 重复步骤 ②，直到所有元素均排序完毕。</span><br><span class="line">3、动画演示</span><br><span class="line">03选择排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">Python 代码：</span><br><span class="line"></span><br><span class="line">def selection_sort(arr):</span><br><span class="line">    for i in range(len(arr)-1):          # 循环第 i 趟</span><br><span class="line">        min_index = i                    # 记录最小数的下标</span><br><span class="line">        for j in range(i+1, len(arr)):   # j 为下标</span><br><span class="line">            if arr[j] &lt; arr[min_index]:  # 如果这个数小于记录的最小数，则更新最小数的下标</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]  # 将 i 位置的数（已排序序列的末尾的数）和最小数进行交换</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def selection_sort(arr):</span><br><span class="line">    for i in range(len(arr)-1):          # 循环第 i 趟</span><br><span class="line">        min_index = i                    # 记录最小数的下标</span><br><span class="line">        for j in range(i+1, len(arr)):   # j 为下标</span><br><span class="line">            if arr[j] &lt; arr[min_index]:  # 如果这个数小于记录的最小数，则更新最小数的下标</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]  # 将 i 位置的数（已排序序列的末尾的数）和最小数进行交换</span><br><span class="line">        print(arr)                       # 每一趟比较完了就打印一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]</span><br><span class="line">selection_sort(arr)</span><br><span class="line">[2, 44, 38, 5, 47, 15, 36, 26, 27, 3, 46, 4, 19, 50, 48]</span><br><span class="line">[2, 3, 38, 5, 47, 15, 36, 26, 27, 44, 46, 4, 19, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 47, 15, 36, 26, 27, 44, 46, 38, 19, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 47, 15, 36, 26, 27, 44, 46, 38, 19, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 47, 36, 26, 27, 44, 46, 38, 19, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 36, 26, 27, 44, 46, 38, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 36, 27, 44, 46, 38, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 44, 46, 38, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 44, 46, 38, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 46, 44, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 50, 48]</span><br><span class="line">[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span><br><span class="line">三、插入排序（Insertion Sort）</span><br><span class="line">1、原理</span><br><span class="line">插入排序一般也被称为直接插入排序。对于少量元素的排序，它是一个有效的算法。它的基本思想是将一个记录插入到已经排好序的有序表中，从而形成一个新的有序表。在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素进行遍历，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动。</span><br><span class="line"></span><br><span class="line">插入排序的工作方式像许多人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较。拿在左手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 从第一个元素开始，该元素可以认为已经被排序；</span><br><span class="line">② 取出下一个元素，在已经排序的元素序列中从后向前扫描；</span><br><span class="line">③ 如果该元素（已排序的）大于新元素，将该元素往右移到下一位置，重复该步骤，直到找到已排序的元素小于或者等于新元素的位置；</span><br><span class="line">④ 将新元素插入到步骤 ③ 找到的位置的后面；</span><br><span class="line">⑤ 重复步骤 ② ~ ④。</span><br><span class="line">3、动画演示</span><br><span class="line">04插入排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def insertion_sort(arr):</span><br><span class="line">    for i in range(1, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">        tmp = arr[i]                # 将摸到的牌储存到 tmp</span><br><span class="line">        j = i-1                     # 将 j 看做手里的牌的下标</span><br><span class="line">        while j &gt;= 0 and arr[j] &gt; tmp:  # 如果手里的牌大于摸到的牌</span><br><span class="line">            arr[j+1] = arr[j]       # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">            j -= 1                  # 将手里的牌的下标减 1，再次准备与摸到的牌进行比较</span><br><span class="line">        arr[j+1] = tmp              # 将摸到的牌插入到 j+1 位置</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def insertion_sort(arr):</span><br><span class="line">    for i in range(1, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">        tmp = arr[i]                # 将摸到的牌储存到 tmp</span><br><span class="line">        j = i-1                     # 将 j 看做手里的牌的下标</span><br><span class="line">        while j &gt;= 0 and arr[j] &gt; tmp:  # 如果手里的牌大于摸到的牌</span><br><span class="line">            arr[j+1] = arr[j]       # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">            j -= 1                  # 将手里的牌的下标减 1，再次准备与摸到的牌进行比较</span><br><span class="line">        arr[j+1] = tmp              # 将摸到的牌插入到 j+1 位置</span><br><span class="line">        print(arr)                  # 每一趟比较完了就打印一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [0, 9, 8, 7, 1, 2, 3, 4, 5, 6]</span><br><span class="line">insertion_sort(arr)</span><br><span class="line">[0, 9, 8, 7, 1, 2, 3, 4, 5, 6]  # 手里第一张牌为 0，摸到 9，此时 i=1，j=0，0 比 9 小，将 9 插到索引 j+1=1 处。</span><br><span class="line">[0, 8, 9, 7, 1, 2, 3, 4, 5, 6]  # 手里的牌为 0，9，摸到 8，此时 i=2，j=1，9 比 8 大，将 9 右移一个位置，j-1=0，将 8 插到 j+1=1 处</span><br><span class="line">[0, 7, 8, 9, 1, 2, 3, 4, 5, 6]</span><br><span class="line">[0, 1, 7, 8, 9, 2, 3, 4, 5, 6]</span><br><span class="line">[0, 1, 2, 7, 8, 9, 3, 4, 5, 6]</span><br><span class="line">[0, 1, 2, 3, 7, 8, 9, 4, 5, 6]</span><br><span class="line">[0, 1, 2, 3, 4, 7, 8, 9, 5, 6]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 7, 8, 9, 6]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">四、希尔排序（Shell Sort）</span><br><span class="line">1、原理</span><br><span class="line">希尔排序是插入排序的一种更高效的改进版本，是一种分组插入排序算法，又称缩小增量排序（Diminishing Increment Sort），希尔排序是非稳定排序算法。该方法因 D.L.Shell 于 1959 年提出而得名。</span><br><span class="line"></span><br><span class="line">希尔排序是基于插入排序的以下两点性质而提出改进方法的：</span><br><span class="line"></span><br><span class="line">插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</span><br><span class="line">但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</span><br><span class="line">希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① n 为数组长度，首先取一个整数 d1=n/2，将元素分为 d1 个组，每组相邻量元素之间距离为 d1-1，在各组内进行直接插入排序；</span><br><span class="line">② 取第二个整数 d2=d1/2，重复步骤 ① 分组排序过程，直到 di=1，即所有元素在同一组内进行直接插入排序。</span><br><span class="line">PS：希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</span><br><span class="line"></span><br><span class="line">3、动画演示</span><br><span class="line">05希尔排序</span><br><span class="line"></span><br><span class="line">06希尔排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def insertion_sort_gap(arr, gap):     # 将 gap 看做隔 gap 个距离摸一张牌，而不是依次按照顺序摸牌</span><br><span class="line">    for i in range(gap, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">        tmp = arr[i]                  # 将摸到的牌储存到 tmp</span><br><span class="line">        j = i-gap                     # 将 j 看做手里的牌的下标</span><br><span class="line">        while j &gt;= 0 and arr[j] &gt; tmp:  # 如果手里的牌大于摸到的牌</span><br><span class="line">            arr[j+gap] = arr[j]         # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">            j -= gap                    # 将手里的牌的下标减 gap，再次准备与摸到的牌进行比较</span><br><span class="line">        arr[j+gap] = tmp                # 将摸到的牌插入到 j+gap 位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shell_sort(arr):</span><br><span class="line">    d = len(arr) // 2                   # 第一次分组</span><br><span class="line">    while d &gt;= 1:</span><br><span class="line">        insertion_sort_gap(arr, d)      # 调用插入排序</span><br><span class="line">        d //= 2                         # 整除 2 后再次分组</span><br><span class="line">    return arr</span><br><span class="line">也可以不使用两个函数，写在一起即可：</span><br><span class="line"></span><br><span class="line">def shell_sort(arr):</span><br><span class="line">    d = len(arr) // 2                   # 第一次分组</span><br><span class="line">    while d &gt;= 1:                       # 将 d 看做隔 d 个距离摸一张牌，而不是依次按照顺序摸牌</span><br><span class="line">        for i in range(d, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">            tmp = arr[i]                # 将摸到的牌储存到 tmp</span><br><span class="line">            j = i - d                   # 将 j 看做手里的牌的下标</span><br><span class="line">            while j &gt;= 0 and arr[j] &gt; tmp:   # 如果手里的牌大于摸到的牌</span><br><span class="line">                arr[j + d] = arr[j]          # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">                j -= d                       # 将手里的牌的下标减 d，再次准备与摸到的牌进行比较</span><br><span class="line">            arr[j + d] = tmp                 # 将摸到的牌插入到 j+d 位置</span><br><span class="line">        d //= 2                              # 整除 2 后再次分组</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def insertion_sort_gap(arr, gap):     # 将 gap 看做隔 gap 个距离摸一张牌，而不是依次按照顺序摸牌</span><br><span class="line">    for i in range(gap, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">        tmp = arr[i]                  # 将摸到的牌储存到 tmp</span><br><span class="line">        j = i-gap                     # 将 j 看做手里的牌的下标</span><br><span class="line">        while j &gt;= 0 and arr[j] &gt; tmp:  # 如果手里的牌大于摸到的牌</span><br><span class="line">            arr[j+gap] = arr[j]         # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">            j -= gap                    # 将手里的牌的下标减 gap，再次准备与摸到的牌进行比较</span><br><span class="line">        arr[j+gap] = tmp                # 将摸到的牌插入到 j+gap 位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shell_sort(arr):</span><br><span class="line">    d = len(arr) // 2                   # 第一次分组</span><br><span class="line">    while d &gt;= 1:</span><br><span class="line">        insertion_sort_gap(arr, d)      # 调用插入排序</span><br><span class="line">        print(arr)                      # 每一轮排序后打印一次</span><br><span class="line">        d //= 2                         # 整除 2 后再次分组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [5, 7, 4, 6, 3, 1, 2, 9, 8]</span><br><span class="line">shell_sort(arr)</span><br><span class="line">[3, 1, 2, 6, 5, 7, 4, 9, 8]</span><br><span class="line">[2, 1, 3, 6, 4, 7, 5, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">def shell_sort(arr):</span><br><span class="line">    d = len(arr) // 2                   # 第一次分组</span><br><span class="line">    while d &gt;= 1:                       # 将 d 看做隔 d 个距离摸一张牌，而不是依次按照顺序摸牌</span><br><span class="line">        for i in range(d, len(arr)):    # 将 i 看做摸到的牌的下标</span><br><span class="line">            tmp = arr[i]                # 将摸到的牌储存到 tmp</span><br><span class="line">            j = i - d                   # 将 j 看做手里的牌的下标</span><br><span class="line">            while j &gt;= 0 and arr[j] &gt; tmp:   # 如果手里的牌大于摸到的牌</span><br><span class="line">                arr[j + d] = arr[j]          # 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span><br><span class="line">                j -= d                       # 将手里的牌的下标减 d，再次准备与摸到的牌进行比较</span><br><span class="line">            arr[j + d] = tmp                 # 将摸到的牌插入到 j+d 位置</span><br><span class="line">        print(arr)                           # 每一轮排序后打印一次</span><br><span class="line">        d //= 2                              # 整除 2 后再次分组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [5, 7, 4, 6, 3, 1, 2, 9, 8]</span><br><span class="line">shell_sort(arr)</span><br><span class="line">[3, 1, 2, 6, 5, 7, 4, 9, 8]</span><br><span class="line">[2, 1, 3, 6, 4, 7, 5, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">五、归并排序（Merge Sort）</span><br><span class="line">1、原理</span><br><span class="line">归并的概念：假设一个列表分为两段，其中每一段都是有序列表，现在将该两段合并为一个有序列表，这种操作称为一次归并。</span><br><span class="line"></span><br><span class="line">归并排序是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</span><br><span class="line"></span><br><span class="line">08</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">归并的基本步骤：</span><br><span class="line"></span><br><span class="line">① 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</span><br><span class="line">② 设定两个指针，最初位置分别为两个已经排序序列的起始位置；</span><br><span class="line">③ 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</span><br><span class="line">④ 重复步骤 ③ 直到某一指针达到序列尾；</span><br><span class="line">⑤ 将另一序列剩下的所有元素直接复制到合并序列尾。</span><br><span class="line">归并排序的步骤：</span><br><span class="line"></span><br><span class="line">① 分解：将列表越分越小，直至分成一个元素，终止条件：一个元素是有序的。</span><br><span class="line">② 合并：不断将两个有序列表进行归并，列表越来越大，直到所有序列归并完毕。</span><br><span class="line">3、动画演示</span><br><span class="line">07归并排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def merge(arr, low, mid, high):</span><br><span class="line">    # low 和 high 为整个数组的第一个和最后一个位置索引，mid 为中间位置索引</span><br><span class="line">    # i 和 j 为指针，最初位置分别为两个有序序列的起始位置</span><br><span class="line">    # ltmp 用来存放合并后的序列</span><br><span class="line">    i = low</span><br><span class="line">    j = mid+1</span><br><span class="line">    ltmp = []</span><br><span class="line">    while i &lt;= mid and j &lt;= high:  # 只要左右两边都有数</span><br><span class="line">        if arr[i] &lt; arr[j]:        # 当左边的数小于右边的数</span><br><span class="line">            ltmp.append(arr[i])    # 将左边的数存入 ltmp</span><br><span class="line">            i += 1                 # 左边的指针往右移一位</span><br><span class="line">        else:                      # 当右边的数小于左边的数</span><br><span class="line">            ltmp.append(arr[j])    # 将右边的数存入 ltmp</span><br><span class="line">            j += 1                 # 右边的指针往右移一位</span><br><span class="line">    # 上面的 while 语句执行完后，左边或者右边没有数了</span><br><span class="line">    while i &lt;= mid:                # 当左边还有数的时候</span><br><span class="line">        ltmp.append(arr[i])        # 将左边剩下的数全部存入 ltmp</span><br><span class="line">        i += 1</span><br><span class="line">    while j &lt;= high:               # 当右边还有数的时候</span><br><span class="line">        ltmp.append(arr[j])        # 将右边剩下的数全部存入 ltmp</span><br><span class="line">        j += 1</span><br><span class="line">    arr[low:high+1] = ltmp         # 将排序后的数组写回原数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def merge_sort(arr, low, high):       # low 和 high 为整个数组的第一个和最后一个位置索引</span><br><span class="line">    if low &lt; high:                    # 至少有两个元素</span><br><span class="line">        mid = (low + high) // 2</span><br><span class="line">        merge_sort(arr, low, mid)     # 把左边递归分解</span><br><span class="line">        merge_sort(arr, mid+1, high)  # 把右边递归分解</span><br><span class="line">        merge(arr, low, mid, high)    # 做归并</span><br><span class="line">5、具体示例</span><br><span class="line">def merge(arr, low, mid, high):</span><br><span class="line">    # low 和 high 为整个数组的第一个和最后一个位置索引，mid 为中间位置索引</span><br><span class="line">    # i 和 j 为指针，最初位置分别为两个有序序列的起始位置</span><br><span class="line">    # ltmp 用来存放合并后的序列</span><br><span class="line">    i = low</span><br><span class="line">    j = mid+1</span><br><span class="line">    ltmp = []</span><br><span class="line">    while i &lt;= mid and j &lt;= high:  # 只要左右两边都有数</span><br><span class="line">        if arr[i] &lt; arr[j]:        # 当左边的数小于右边的数</span><br><span class="line">            ltmp.append(arr[i])    # 将左边的数存入 ltmp</span><br><span class="line">            i += 1                 # 左边的指针往右移一位</span><br><span class="line">        else:                      # 当右边的数小于左边的数</span><br><span class="line">            ltmp.append(arr[j])    # 将右边的数存入 ltmp</span><br><span class="line">            j += 1                 # 右边的指针往右移一位</span><br><span class="line">    # 上面的 while 语句执行完后，左边或者右边没有数了</span><br><span class="line">    while i &lt;= mid:                # 当左边还有数的时候</span><br><span class="line">        ltmp.append(arr[i])        # 将左边剩下的数全部存入 ltmp</span><br><span class="line">        i += 1</span><br><span class="line">    while j &lt;= high:               # 当右边还有数的时候</span><br><span class="line">        ltmp.append(arr[j])        # 将右边剩下的数全部存入 ltmp</span><br><span class="line">        j += 1</span><br><span class="line">    arr[low:high+1] = ltmp         # 将排序后的数组写回原数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def merge_sort(arr, low, high):       # low 和 high 为整个数组的第一个和最后一个位置索引</span><br><span class="line">    if low &lt; high:                    # 至少有两个元素</span><br><span class="line">        mid = (low + high) // 2</span><br><span class="line">        merge_sort(arr, low, mid)     # 把左边递归分解</span><br><span class="line">        merge_sort(arr, mid+1, high)  # 把右边递归分解</span><br><span class="line">        merge(arr, low, mid, high)    # 做归并</span><br><span class="line">        print(arr)                    # 每一次归并打印一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [7, 1, 3, 2, 6, 9, 4]</span><br><span class="line">merge_sort(arr, 0, len(arr)-1)</span><br><span class="line">[1, 7, 3, 2, 6, 9, 4]</span><br><span class="line">[1, 7, 2, 3, 6, 9, 4]</span><br><span class="line">[1, 2, 3, 7, 6, 9, 4]</span><br><span class="line">[1, 2, 3, 7, 6, 9, 4]</span><br><span class="line">[1, 2, 3, 7, 4, 6, 9]</span><br><span class="line">[1, 2, 3, 4, 6, 7, 9]</span><br><span class="line">这里是一段物理防爬虫文本，请读者忽略。</span><br><span class="line">本文原创首发于 CSDN，作者 ITBOB。</span><br><span class="line">博客首页：https://itrhx.blog.csdn.net/</span><br><span class="line">本文链接：https://itrhx.blog.csdn.net/article/details/108987300</span><br><span class="line">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span><br><span class="line">六、快速排序（Quick Sort）</span><br><span class="line">1、原理</span><br><span class="line">快速排序是对冒泡排序的一种改进。顾名思义快速排序就是快，而且效率高！它是处理大数据最快的排序算法之一了。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 从数列中挑出一个元素，称为 “基准值”;</span><br><span class="line">② 重新排序数列，所有元素比基准值小的放在基准值的左边，比基准值大的放在基准值的右边（相同的数可以到任一边）。在这个分区退出之后，该基准值就处于数列的中间位置。这个称为分区（partition）操作，也可以称为一次归位操作，归位操作的过程见下动图；</span><br><span class="line">③ 递归地把小于基准值元素的子数列和大于基准值元素的子数列按照步骤 ① ② 排序。</span><br><span class="line">09快速排序</span><br><span class="line"></span><br><span class="line">3、动画演示</span><br><span class="line">10快速排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def partition(arr, left, right):</span><br><span class="line">    # 归位操作，left，right 分别为数组左边和右边的位置索引</span><br><span class="line">    tmp = arr[left]</span><br><span class="line">    while left &lt; right:</span><br><span class="line">        while left &lt; right and arr[right] &gt;= tmp:  # 从右边找比 tmp 小的数，如果比 tmp 大，则移动指针</span><br><span class="line">            right -= 1                             # 将指针左移一个位置</span><br><span class="line">        arr[left] = arr[right]                     # 将右边的值写到左边的空位上</span><br><span class="line">        while left &lt; right and arr[left] &lt;= tmp:   # 从左边找比 tmp 大的数，如果比 tmp 小，则移动指针</span><br><span class="line">            left += 1                              # 将指针右移一个位置</span><br><span class="line">        arr[right] = arr[left]                     # 将左边的值写到右边的空位上</span><br><span class="line">    arr[left] = tmp                                # 把 tmp 归位</span><br><span class="line">    return left                   # 返回 left，right 都可以，目的是便于后面的递归操作对左右两部分进行排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def quick_sort(arr, left, right):          # 快速排序</span><br><span class="line">    if left &lt; right:</span><br><span class="line">        mid = partition(arr, left, right)</span><br><span class="line">        quick_sort(arr, left, mid-1)       # 对左半部分进行归位操作</span><br><span class="line">        quick_sort(arr, mid+1, right)      # 对右半部分进行归位操作</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def partition(arr, left, right):</span><br><span class="line">    # 归位操作，left，right 分别为数组左边和右边的位置索引</span><br><span class="line">    tmp = arr[left]</span><br><span class="line">    while left &lt; right:</span><br><span class="line">        while left &lt; right and arr[right] &gt;= tmp:  # 从右边找比 tmp 小的数，如果比 tmp 大，则移动指针</span><br><span class="line">            right -= 1                             # 将指针左移一个位置</span><br><span class="line">        arr[left] = arr[right]                     # 将右边的值写到左边的空位上</span><br><span class="line">        while left &lt; right and arr[left] &lt;= tmp:   # 从左边找比 tmp 大的数，如果比 tmp 小，则移动指针</span><br><span class="line">            left += 1                              # 将指针右移一个位置</span><br><span class="line">        arr[right] = arr[left]                     # 将左边的值写到右边的空位上</span><br><span class="line">    arr[left] = tmp                                # 把 tmp 归位</span><br><span class="line">    return left                   # 返回 left，right 都可以，目的是便于后面的递归操作对左右两部分进行排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def quick_sort(arr, left, right):</span><br><span class="line">    if left &lt; right:</span><br><span class="line">        mid = partition(arr, left, right)</span><br><span class="line">        print(arr)                         # 每次归位后打印一次</span><br><span class="line">        quick_sort(arr, left, mid-1)       # 对左半部分进行归位操作</span><br><span class="line">        quick_sort(arr, mid+1, right)      # 对右半部分进行归位操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [5, 7, 4, 6, 3, 1, 2, 9, 8]</span><br><span class="line">quick_sort(arr, 0, len(arr)-1)</span><br><span class="line">[2, 1, 4, 3, 5, 6, 7, 9, 8]</span><br><span class="line">[1, 2, 4, 3, 5, 6, 7, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 9, 8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">七、堆排序（Heap Sort）</span><br><span class="line">1、原理</span><br><span class="line">堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</span><br><span class="line"></span><br><span class="line">堆：一种特殊的完全二叉树结构</span><br><span class="line">大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</span><br><span class="line">小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</span><br><span class="line">11堆排序</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 构建堆：将待排序序列构建成一个堆 H[0……n-1]，从最后一个非叶子结点开始，从左至右，从下至上进行调整。根据升序或降序需求选择大顶堆或小顶堆；</span><br><span class="line">② 此时的堆顶元素，为最大或者最小元素；</span><br><span class="line">③ 把堆顶元素和堆尾元素互换，调整堆，重新使堆有序；</span><br><span class="line">④ 此时堆顶元素为第二大元素；</span><br><span class="line">⑤ 重复以上步骤，直到堆变空。</span><br><span class="line">3、动画演示</span><br><span class="line">12构建堆</span><br><span class="line"></span><br><span class="line">堆构建完成后再进行推排序：</span><br><span class="line"></span><br><span class="line">13堆排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def sift(arr, low, high):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param li: 列表</span><br><span class="line">    :param low: 堆的根节点位置</span><br><span class="line">    :param high: 堆的最后一个元素的位置</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    i = low                 # i最开始指向根节点</span><br><span class="line">    j = 2 * i + 1           # j开始是左孩子</span><br><span class="line">    tmp = arr[low]          # 把堆顶存起来</span><br><span class="line">    while j &lt;= high:        # 只要j位置有数</span><br><span class="line">        if j + 1 &lt;= high and arr[j+1] &gt; arr[j]:   # 如果右孩子有并且比较大</span><br><span class="line">            j = j + 1       # j指向右孩子</span><br><span class="line">        if arr[j] &gt; tmp:</span><br><span class="line">            arr[i] = arr[j]</span><br><span class="line">            i = j           # 往下看一层</span><br><span class="line">            j = 2 * i + 1</span><br><span class="line">        else:               # tmp更大，把tmp放到i的位置上</span><br><span class="line">            arr[i] = tmp    # 把tmp放到某一级领导位置上</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        arr[i] = tmp        # 把tmp放到叶子节点上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def heap_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    for i in range((n-2)//2, -1, -1):   # i表示建堆的时候调整的部分的根的下标</span><br><span class="line">        sift(arr, i, n-1)</span><br><span class="line">    # 建堆完成</span><br><span class="line">    for i in range(n-1, -1, -1):        # i 指向当前堆的最后一个元素</span><br><span class="line">        arr[0], arr[i] = arr[i], arr[0]</span><br><span class="line">        sift(arr, 0, i - 1)             # i-1是新的high</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def sift(arr, low, high):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    :param li: 列表</span><br><span class="line">    :param low: 堆的根节点位置</span><br><span class="line">    :param high: 堆的最后一个元素的位置</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    i = low                 # i最开始指向根节点</span><br><span class="line">    j = 2 * i + 1           # j开始是左孩子</span><br><span class="line">    tmp = arr[low]          # 把堆顶存起来</span><br><span class="line">    while j &lt;= high:        # 只要j位置有数</span><br><span class="line">        if j + 1 &lt;= high and arr[j+1] &gt; arr[j]:   # 如果右孩子有并且比较大</span><br><span class="line">            j = j + 1       # j指向右孩子</span><br><span class="line">        if arr[j] &gt; tmp:</span><br><span class="line">            arr[i] = arr[j]</span><br><span class="line">            i = j           # 往下看一层</span><br><span class="line">            j = 2 * i + 1</span><br><span class="line">        else:               # tmp更大，把tmp放到i的位置上</span><br><span class="line">            arr[i] = tmp    # 把tmp放到某一级领导位置上</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        arr[i] = tmp        # 把tmp放到叶子节点上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def heap_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    print(&#x27;建堆过程：&#x27;)</span><br><span class="line">    print(arr)</span><br><span class="line">    for i in range((n-2)//2, -1, -1):   # i表示建堆的时候调整的部分的根的下标</span><br><span class="line">        sift(arr, i, n-1)</span><br><span class="line">        print(arr)</span><br><span class="line">    # 建堆完成</span><br><span class="line">    print(&#x27;堆排序过程：&#x27;)</span><br><span class="line">    print(arr)</span><br><span class="line">    for i in range(n-1, -1, -1):        # i 指向当前堆的最后一个元素</span><br><span class="line">        arr[0], arr[i] = arr[i], arr[0]</span><br><span class="line">        sift(arr, 0, i - 1)             # i-1是新的high</span><br><span class="line">        print(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [2, 7, 26, 25, 19, 17, 1, 90, 3, 36]</span><br><span class="line">heap_sort(arr)</span><br><span class="line">建堆过程：</span><br><span class="line">[2, 7, 26, 25, 19, 17, 1, 90, 3, 36]</span><br><span class="line">[2, 7, 26, 25, 36, 17, 1, 90, 3, 19]</span><br><span class="line">[2, 7, 26, 90, 36, 17, 1, 25, 3, 19]</span><br><span class="line">[2, 7, 26, 90, 36, 17, 1, 25, 3, 19]</span><br><span class="line">[2, 90, 26, 25, 36, 17, 1, 7, 3, 19]</span><br><span class="line">[90, 36, 26, 25, 19, 17, 1, 7, 3, 2]</span><br><span class="line">堆排序过程：</span><br><span class="line">[90, 36, 26, 25, 19, 17, 1, 7, 3, 2]</span><br><span class="line">[36, 25, 26, 7, 19, 17, 1, 2, 3, 90]</span><br><span class="line">[26, 25, 17, 7, 19, 3, 1, 2, 36, 90]</span><br><span class="line">[25, 19, 17, 7, 2, 3, 1, 26, 36, 90]</span><br><span class="line">[19, 7, 17, 1, 2, 3, 25, 26, 36, 90]</span><br><span class="line">[17, 7, 3, 1, 2, 19, 25, 26, 36, 90]</span><br><span class="line">[7, 2, 3, 1, 17, 19, 25, 26, 36, 90]</span><br><span class="line">[3, 2, 1, 7, 17, 19, 25, 26, 36, 90]</span><br><span class="line">[2, 1, 3, 7, 17, 19, 25, 26, 36, 90]</span><br><span class="line">[1, 2, 3, 7, 17, 19, 25, 26, 36, 90]</span><br><span class="line">[1, 2, 3, 7, 17, 19, 25, 26, 36, 90]</span><br><span class="line">八、计数排序（Counting Sort）</span><br><span class="line">1、原理</span><br><span class="line">计数排序是一个非基于比较的排序算法，它的优势在于在对一定范围内的整数排序时，它的复杂度为 Ο(n+k)，其中 k 是整数的范围，快于任何比较排序算法。计数排序是一种牺牲空间换取时间的做法。计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</span><br><span class="line"></span><br><span class="line">2、步骤</span><br><span class="line">① 找到待排序列表中的最大值 k，开辟一个长度为 k+1 的计数列表，计数列表中的值都为 0。</span><br><span class="line">② 遍历待排序列表，如果遍历到的元素值为 i，则计数列表中索引 i 的值加1。</span><br><span class="line">③ 遍历完整个待排序列表，计数列表中索引 i 的值 j 表示 i 的个数为 j，统计出待排序列表中每个值的数量。</span><br><span class="line">④ 创建一个新列表（也可以清空原列表，在原列表中添加），遍历计数列表，依次在新列表中添加 j 个 i，新列表就是排好序后的列表，整个过程没有比较待排序列表中的数据大小。</span><br><span class="line">3、动画演示</span><br><span class="line">14计数排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def count_sort(arr):</span><br><span class="line">    if len(arr) &lt; 2:                       # 如果数组长度小于 2 则直接返回</span><br><span class="line">        return arr</span><br><span class="line">    max_num = max(arr)</span><br><span class="line">    count = [0 for _ in range(max_num+1)]  # 开辟一个计数列表</span><br><span class="line">    for val in arr:</span><br><span class="line">        count[val] += 1</span><br><span class="line">    arr.clear()                        # 原数组清空</span><br><span class="line">    for ind, val in enumerate(count):  # 遍历值和下标（值的数量）</span><br><span class="line">        for i in range(val):</span><br><span class="line">            arr.append(ind)</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def count_sort(arr):</span><br><span class="line">    if len(arr) &lt; 2:                       # 如果数组长度小于 2 则直接返回</span><br><span class="line">        return arr</span><br><span class="line">    max_num = max(arr)</span><br><span class="line">    count = [0 for _ in range(max_num+1)]  # 开辟一个计数列表</span><br><span class="line">    for val in arr:</span><br><span class="line">        count[val] += 1</span><br><span class="line">    arr.clear()                        # 原数组清空</span><br><span class="line">    for ind, val in enumerate(count):  # 遍历值和下标（值的数量）</span><br><span class="line">        for i in range(val):</span><br><span class="line">            arr.append(ind)</span><br><span class="line">    return arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2]</span><br><span class="line">sorted_arr = count_sort(arr)</span><br><span class="line">print(sorted_arr)</span><br><span class="line">[1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 8, 9, 9]</span><br><span class="line">九、桶排序（Bucket Sort）</span><br><span class="line">1、原理</span><br><span class="line">桶排序又叫箱排序，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。</span><br><span class="line"></span><br><span class="line">桶排序也是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</span><br><span class="line"></span><br><span class="line">在额外空间充足的情况下，尽量增大桶的数量；</span><br><span class="line">使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中。</span><br><span class="line">同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</span><br><span class="line"></span><br><span class="line">最快情况：当输入的数据可以均匀的分配到每一个桶中；</span><br><span class="line">最慢情况：当输入的数据被分配到了同一个桶中。</span><br><span class="line">2、步骤</span><br><span class="line">① 创建一个定量的数组当作空桶子；</span><br><span class="line">② 遍历序列，把元素一个一个放到对应的桶子去；</span><br><span class="line">③ 对每个不是空的桶子进行排序；</span><br><span class="line">④ 从不是空的桶子里把元素再放回原来的序列中。</span><br><span class="line">3、动画演示</span><br><span class="line">（动图来源于@五分钟学算法，侵删）</span><br><span class="line"></span><br><span class="line">15桶排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def bucket_sort(arr):</span><br><span class="line">    max_num = max(arr)</span><br><span class="line">    n = len(arr)</span><br><span class="line">    buckets = [[] for _ in range(n)]         # 创建桶</span><br><span class="line">    for var in arr:</span><br><span class="line">        i = min(var // (max_num // n), n-1)  # i 表示 var 放到几号桶里</span><br><span class="line">        buckets[i].append(var)               # 把 var 加到桶里边</span><br><span class="line">        # 保持桶内的顺序</span><br><span class="line">        for j in range(len(buckets[i])-1, 0, -1):</span><br><span class="line">            if buckets[i][j] &lt; buckets[i][j-1]:</span><br><span class="line">                buckets[i][j], buckets[i][j-1] = buckets[i][j-1], buckets[i][j]</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">    sorted_arr = []</span><br><span class="line">    for buc in buckets:</span><br><span class="line">        sorted_arr.extend(buc)</span><br><span class="line">    return sorted_arr</span><br><span class="line">5、具体示例</span><br><span class="line">def bucket_sort(arr):</span><br><span class="line">    max_num = max(arr)</span><br><span class="line">    n = len(arr)</span><br><span class="line">    buckets = [[] for _ in range(n)]         # 创建桶</span><br><span class="line">    for var in arr:</span><br><span class="line">        i = min(var // (max_num // n), n-1)  # i 表示 var 放到几号桶里</span><br><span class="line">        buckets[i].append(var)               # 把 var 加到桶里边</span><br><span class="line">        # 保持桶内的顺序</span><br><span class="line">        for j in range(len(buckets[i])-1, 0, -1):</span><br><span class="line">            if buckets[i][j] &lt; buckets[i][j-1]:</span><br><span class="line">                buckets[i][j], buckets[i][j-1] = buckets[i][j-1], buckets[i][j]</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">    sorted_arr = []</span><br><span class="line">    for buc in buckets:</span><br><span class="line">        sorted_arr.extend(buc)</span><br><span class="line">    return sorted_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [7, 12, 56, 23, 19, 33, 35, 42, 42, 2, 8, 22, 39, 26, 17]</span><br><span class="line">sorted_arr = bucket_sort(arr)</span><br><span class="line">print(sorted_arr)</span><br><span class="line">[2, 7, 8, 12, 17, 19, 22, 23, 26, 33, 35, 39, 42, 42, 56]</span><br><span class="line">十、基数排序（Radix Sort）</span><br><span class="line">1、原理</span><br><span class="line">基数排序属于分配式排序，是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</span><br><span class="line"></span><br><span class="line">基数排序、计数排序、桶排序三种排序算法都利用了桶的概念，但对桶的使用方法上是有明显差异的：</span><br><span class="line"></span><br><span class="line">基数排序：根据键值的每位数字来分配桶；</span><br><span class="line">计数排序：每个桶只存储单一键值；</span><br><span class="line">桶排序：每个桶存储一定范围的数值。</span><br><span class="line">2、步骤</span><br><span class="line">① 取数组中的最大数，并取得位数；</span><br><span class="line">② 从最低位开始，依次进行一次排序；</span><br><span class="line">③ 从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</span><br><span class="line">3、动画演示</span><br><span class="line">16基数排序</span><br><span class="line"></span><br><span class="line">4、代码实现</span><br><span class="line">def radix_sort(li):</span><br><span class="line">    max_num = max(li)      # 最大值 9-&gt;1次循环, 99-&gt;2次循环, 888-&gt;3次循环, 10000-&gt;5次循环</span><br><span class="line">    it = 0</span><br><span class="line">    while 10 ** it &lt;= max_num:</span><br><span class="line">        buckets = [[] for _ in range(10)]</span><br><span class="line">        for var in li:</span><br><span class="line">            # var=987, it=1, 987//10-&gt;98, 98%10-&gt;8; it=2, 987//100-&gt;9, 9%10=9</span><br><span class="line">            digit = (var // 10 ** it) % 10   # 依次取一位数</span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line">        # 分桶完成</span><br><span class="line">        li.clear()</span><br><span class="line">        for buc in buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += 1            # 把数重新写回 li</span><br><span class="line">    return arr</span><br><span class="line">5、具体示例</span><br><span class="line">def radix_sort(li):</span><br><span class="line">    max_num = max(li)      # 最大值 9-&gt;1次循环, 99-&gt;2次循环, 888-&gt;3次循环, 10000-&gt;5次循环</span><br><span class="line">    it = 0</span><br><span class="line">    while 10 ** it &lt;= max_num:</span><br><span class="line">        buckets = [[] for _ in range(10)]</span><br><span class="line">        for var in li:</span><br><span class="line">            # var=987, it=1, 987//10-&gt;98, 98%10-&gt;8; it=2, 987//100-&gt;9, 9%10=9</span><br><span class="line">            digit = (var // 10 ** it) % 10   # 依次取一位数</span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line">        # 分桶完成</span><br><span class="line">        li.clear()</span><br><span class="line">        for buc in buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += 1            # 把数重新写回 li</span><br><span class="line">    return arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [3221, 1, 10, 9680, 577, 9420, 7, 5622, 4793, 2030, 3138, 82, 2599, 743, 4127]</span><br><span class="line">sorted_arr = radix_sort(arr)</span><br><span class="line">print(sorted_arr)</span><br><span class="line">[1, 7, 10, 82, 577, 743, 2030, 2599, 3138, 3221, 4127, 4793, 5622, 9420, 9680]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
